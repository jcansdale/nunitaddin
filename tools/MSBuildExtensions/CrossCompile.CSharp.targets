<Project 
 DefaultTargets="Build" 
 xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
 
 <!--
 Now that the standard targets have been brought in. Override some properties 
 and items it created.
 --> 
 <PropertyGroup>
 
	<!-- Not supported in .NET 1.0 -->
  <ErrorReport Condition=" '$(TargetFrameworkVersion)' == 'v1.0' "></ErrorReport>

<!--   $(SystemRoot)\Microsoft.NET\Framework\v1.0.3705 -->
  <TargetFrameworkDirectory Condition=" '$(TargetFrameworkVersion)' == 'v1.0'">
   $(SystemRoot)\Microsoft.NET\Framework\v1.1.4322
  </TargetFrameworkDirectory>
  
	<!-- Use the 1.0 compiler -->
  <CscToolPath Condition=" '$(TargetFrameworkVersion)' == 'v1.0' ">$(TargetFrameworkDirectory)</CscToolPath>
  
  <AssemblySearchPaths Condition=" '$(TargetFrameworkVersion)' == 'v1.0' ">
   {CandidateAssemblyFiles};
   $(ReferencePath);
   {HintPathFromItem};
   {TargetFrameworkDirectory};
   {AssemblyFolders};
   $(OutputPath);
   {GAC}
  </AssemblySearchPaths>

 </PropertyGroup>

 <ItemGroup Condition=" '$(TargetFrameworkVersion)' == 'v1.0'">
  <TargetFrameworkDirectoryItem Include="$(TargetFrameworkDirectory)">
   <InProject>false</InProject>
  </TargetFrameworkDirectoryItem>
 </ItemGroup>

 <!--
 Override this target from Microsoft.Common.Targets so that we can supply our own 
 value for $(TargetFrameworkDirectory). This controls where assembly resolution 
 logic finds FX assemblies.
 -->
 <Target
        Name="GetFrameworkPaths"
        DependsOnTargets="$(GetFrameworkPathsDependsOn)">

  <!-- Get the path to the target .NET framework directory. -->
  <GetFrameworkPath
   Condition=" '$(TargetFrameworkVersion)' != 'v1.0' ">
   <Output TaskParameter="Path" PropertyName="TargetFrameworkDirectory"/>
   <Output TaskParameter="Path" ItemName="TargetFrameworkDirectoryItem"/>
  </GetFrameworkPath>

  <!-- Get the path to the target .NET framework SDK directory. -->
  <GetFrameworkSDKPath
   Condition=" '$(TargetFrameworkVersion)' != 'v1.0' ">
   <Output TaskParameter="Path" PropertyName="TargetFrameworkSDKDirectory"/>
   <Output TaskParameter="Path" ItemName="TargetFrameworkSDKDirectoryItem"/>
  </GetFrameworkSDKPath>

 </Target>

 <!--
 For 1.0 builds, intercept the call to CorResGen target (which generates 2.0 resources) and
 slip in a call to our own CoreResGen_1_1.
 
 Handily, the devices version of the ResGen task is able to call the 1.0 version of 
 ResGen directly.
 -->
 <UsingTask TaskName="CFResGen" AssemblyFile="$(MSBuildExtensionsPath)\Microsoft.CompactFramework.Build.Tasks.dll" />
 <PropertyGroup Condition="'$(TargetFrameworkVersion)' == 'v1.0'">
  <ResGenDependsOn>ResolveAssemblyReferences;BeforeResGen;CoreResGen_1_1;AfterResGen</ResGenDependsOn>
 </PropertyGroup>
 <Target
        Name="CoreResGen_1_1"
        DependsOnTargets="$(CoreResGenDependsOn)">
  
  <CFResGen
            ToolPath="$(MSBuildExtensionsPath)\ResGen\v1.0"
            Condition = " '@(ResxWithNoCulture)' != ''"
            Sources = "@(ResxWithNoCulture)"
            UseSourcePath = "$(UseSourcePath)"
            StateFile = "$(IntermediateOutputPath)$(MSBuildProjectFile).CrossCompileResGen.Cache"
            OutputResources = "@(ManifestResourceWithNoCultureName->'$(IntermediateOutputPath)%(Identity).resources')"
        >
   <!-- Appending to 'FilesWritten' list lets us be part of Clean and Incremental Clean. -->
   <Output TaskParameter = "FilesWritten" ItemName="FileWrites"/>
   <Output TaskParameter = "OutputResources" ItemName="ManifestResourceWithNoCulture"/>
  </CFResGen>

  <CFResGen
            ToolPath="$(MSBuildExtensionsPath)\ResGen\v1.0"
            Condition = " '@(ResxWithCulture)' != ''"
            Sources = "@(ResxWithCulture)"
            UseSourcePath = "$(UseSourcePath)"
            StateFile = "$(IntermediateOutputPath)$(MSBuildProjectFile).CrossCompileResGen.Cache"
            OutputResources = "@(ManifestResourceWithCultureName->'$(IntermediateOutputPath)%(Identity).resources')"
        >
   <!-- Appending to 'FilesWritten' list lets us be part of Clean and Incremental Clean. -->
   <Output TaskParameter = "FilesWritten" ItemName="FileWrites"/>
   <Output TaskParameter = "OutputResources" ItemName="ManifestResourceWithCulture"/>
   
  </CFResGen>
 </Target>

</Project>


